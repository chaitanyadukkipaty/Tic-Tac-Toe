{"version":3,"sources":["components/Squares.js","components/Board.js","Pages/GameRoom/GameRoom.js","helper.js","Pages/Home/Home.jsx","serviceWorker.js","index.js"],"names":["style","background","border","fontSize","fontWeight","cursor","outline","Square","onClick","value","borderRadius","width","height","margin","display","gridTemplateColumns","gridTemplateRows","Board","squares","map","square","i","key","socket","openSocket","baseUrl","GameRoom","textInput","useRef","path","useLocation","pathname","split","playerId","pop","roomId","useState","Array","fill","board","setBoard","isMyTurn","setIsMyTrun","setBid","pts","setPts","winner","lines","length","a","b","c","calculateWinner","myChar","setChar","btn","setBtn","handleClick","boardCopy","payload","axios","post","data","status","submitBid","bid","current","Number","toast","error","useEffect","emit","on","bidWinner","move","dark","game","oppoChar","className","InputGroup","Prepend","Text","id","FormControl","ref","placeholder","aria-label","aria-describedby","Button","disabled","Home","username","room","console","log","window","location","href","Navbar","collapseOnSelect","expand","variant","Brand","Card","Title","Body","createRoom","Boolean","hostname","match","ReactDOM","render","StrictMode","exact","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4013cf58.chunk.js","sourcesContent":["import React from \"react\";\n\nconst style = {\n  background: \"lightblue\",\n  border: \"2px solid darkblue\",\n  fontSize: \"30px\",\n  fontWeight: \"800\",\n  cursor: \"pointer\",\n  outline: \"none\",\n};\n\nconst Square = ({ onClick, value }) => {\n  return (\n    <button style={style} onClick={onClick}>\n      {value}\n    </button>\n  );\n};\n\nexport default Square;\n","import React from \"react\";\nimport Square from \"./Squares\";\n\nconst style = {\n  border: \"4px solid darkblue\",\n  borderRadius: \"10px\",\n  width: \"250px\",\n  height: \"250px\",\n  margin: \"0 auto\",\n  display: \"grid\",\n  gridTemplateColumns: \"repeat(3, 1fr)\",\n  gridTemplateRows: \"repeat(3, 1fr)\",\n};\n\nconst Board = ({ squares, onClick }) => {\n  return (\n    <div style={style}>\n      {squares.map((square, i) => (\n        <Square key={i} value={square} onClick={() => onClick(i)} />\n      ))}\n    </div>\n  );\n};\n\nexport default Board;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./GameRoom.css\";\nimport Board from \"../../components/Board\";\nimport { calculateWinner } from \"../../helper\";\nimport { useLocation } from \"react-router-dom\";\nimport openSocket from \"socket.io-client\";\nimport axios from \"axios\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { baseUrl } from \"../../config.json\";\nimport { Card, Navbar, Button, InputGroup, FormControl } from \"react-bootstrap\";\n\nconst socket = openSocket(baseUrl);\nconst style = {\n  margin: \"20px auto\",\n  width: \"220px\",\n};\nfunction GameRoom() {\n  const textInput = useRef();\n  const { pathname } = useLocation();\n  const path = pathname.split(\"/\");\n  const playerId = path.pop();\n  const roomId = path.pop();\n\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [isMyTurn, setIsMyTrun] = useState(false);\n  const [bid, setBid] = useState();\n  const [pts, setPts] = useState(100);\n  const winner = calculateWinner(board);\n  const [myChar, setChar] = useState(\"\");\n  const [btn, setBtn] = useState(false);\n\n  const handleClick = async (i) => {\n    const boardCopy = [...board];\n    if (winner || boardCopy[i]) return;\n    if (isMyTurn) {\n      boardCopy[i] = myChar;\n      const payload = {\n        roomId: roomId,\n        playerId: playerId,\n        value: i,\n        board: boardCopy,\n      };\n      const { data } = await axios.post(`${baseUrl}/symbolPlaced`, payload);\n      if (data.status) {\n        setIsMyTrun(false);\n      }\n    }\n  };\n\n  const submitBid = async () => {\n    const bid = textInput.current.value;\n    const payload = {\n      roomId: roomId,\n      playerId: playerId,\n      value: Number(bid),\n      board: board,\n    };\n    if (pts >= Number(bid)) {\n      const { data } = await axios.post(`${baseUrl}/bid`, payload);\n      if (data.status) {\n        setBtn((current) => !current);\n      }\n    } else {\n      toast.error(\"You don't have enought Points\");\n    }\n  };\n\n  useEffect(() => {\n    socket.emit(\"joinRoom\", { roomId, playerId });\n    socket.on(\"gameState\", (data) => {\n      const { bid, bidWinner, move } = data;\n      if (bid.status === \"DRAW\") {\n        setBtn((current) => true);\n        toast.dark(\"It's a Draw\");\n      } else if (bid.status === \"DONE\" && bidWinner === null && move === null) {\n        toast.dark(\"Bids are equal\");\n      } else if (\n        bid.status === \"DONE\" &&\n        bidWinner === playerId &&\n        move === playerId\n      ) {\n        textInput.current.value = \"\";\n        setIsMyTrun(true);\n        toast.dark(\"Your Turn\");\n      } else if (\n        bid.status === \"DONE\" &&\n        bidWinner !== playerId &&\n        move !== playerId\n      ) {\n        textInput.current.value = \"\";\n        toast.dark(\"You Lost the Bid\");\n      }\n      if (bid[playerId] === 0 && bid.status === \"DONE\") {\n        setBtn((current) => !current);\n      }\n      setPts(data[playerId]);\n    });\n    socket.on(\"Char\", (data) => {\n      if (myChar === \"\") setChar(data);\n    });\n\n    socket.on(\"Reload\", (data) => {\n      const { bid, bidWinner, move } = data;\n      if (\n        bid.status === \"DONE\" &&\n        bidWinner === playerId &&\n        move === playerId\n      ) {\n        setIsMyTrun(true);\n        toast.dark(\"Your Turn\");\n      }\n      if (bid[playerId] !== 0) {\n        setBtn((current) => !current);\n        setBid(bid[playerId]);\n      }\n      setBoard(data[\"board\"]);\n      setPts(data[playerId]);\n    });\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"Move\", (data) => {\n      const boardCopy = [...board];\n      const { game, bidWinner } = data;\n      if (winner || boardCopy[game]) return;\n      const oppoChar = \"X\" === myChar ? \"O\" : \"X\";\n      boardCopy[game] = bidWinner === playerId ? myChar : oppoChar;\n      setBoard(boardCopy);\n    });\n  }, [myChar, board]);\n\n  return (\n    <>\n      <div className=\"root\">\n        <ToastContainer />\n        <div className=\"Game\">\n          <div className=\"Game-Center\">\n            <Board squares={board} onClick={handleClick} />\n            <p className=\"font\">{\"Points left: \" + pts}</p>\n          </div>\n          <div style={style} className=\"game-state\">\n            <InputGroup className=\"mb-3 input\">\n              <InputGroup.Prepend>\n                <InputGroup.Text id=\"basic-addon1\">$</InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                ref={textInput}\n                placeholder=\"Bid\"\n                aria-label=\"Bid\"\n                aria-describedby=\"basic-addon1\"\n              />\n            </InputGroup>\n            <Button className=\"button\" onClick={submitBid} disabled={btn}>\n              Bid\n            </Button>\n            <p className=\"font\">{btn && \"Waiting for Other Player to Bid\"}</p>\n            <p className=\"font\">{winner && \"Winner: \" + winner}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default GameRoom;\n","export function calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n","import React, { useState, useRef } from \"react\";\nimport \"./Home.css\";\nimport axios from \"axios\";\nimport { baseUrl } from \"../../config.json\";\nimport { Card, Navbar, Button, InputGroup, FormControl } from \"react-bootstrap\";\n\nfunction Home() {\n  const textInput = useRef();\n  async function createRoom() {\n    const username = textInput.current.value;\n    const { data } = await axios.post(baseUrl);\n    const path = `/room/${data.room}/${username}`;\n    console.log(path);\n    window.location.href = path;\n  }\n  return (\n    <>\n      <div className=\"root\">\n        <Navbar\n          collapseOnSelect\n          className=\"nav-color\"\n          expand=\"lg\"\n          variant=\"dark\"\n        >\n          <Navbar.Brand>Tic-Tac-Toe</Navbar.Brand>\n        </Navbar>\n        <div className=\"Home\">\n          <div className=\"rules\">\n            <Card className=\"card\">\n              <Card.Title className=\"card-title\">Rules</Card.Title>\n              <Card.Body className=\"card-body\">\n                <ul>\n                  <li>\n                    Unlike Regular Tic Tac Toe 'X' doesnt always start first.\n                  </li>\n                  <li>\n                    Each player begins with 100 points. Players can use these\n                    points to place bids\n                  </li>\n                  <li>\n                    Turns are decided by the bids placed by the players. The\n                    Player with bigger bid wins round and can freely place\n                    his/her move\n                  </li>\n                  <li>\n                    If both players reach 0 points before winning then the game\n                    is considered a draw\n                  </li>\n                  <li>\n                    If both players bid the same points then its considered draw\n                    and they have to bid again\n                  </li>\n                </ul>\n              </Card.Body>\n            </Card>\n          </div>\n\n          <div className=\"start-game\">\n            <p className=\"font\">To Start Enter Your Name</p>\n            <InputGroup className=\"mb-3 input\">\n              <InputGroup.Prepend>\n                <InputGroup.Text id=\"basic-addon1\">@</InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                ref={textInput}\n                placeholder=\"Username\"\n                aria-label=\"Username\"\n                aria-describedby=\"basic-addon1\"\n              />\n            </InputGroup>\n            <Button className=\"button\" onClick={() => createRoom()}>\n              {\"Start\"}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport GameRoom from \"../src/Pages/GameRoom/GameRoom\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport Home from \"../src/Pages/Home/Home\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"/room\">\n          <GameRoom />\n        </Route>\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}