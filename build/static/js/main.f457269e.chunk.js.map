{"version":3,"sources":["components/Squares.js","components/Board.js","components/Game.js","helper.js","Pages/GameRoom/GameRoom.js","Pages/Home/Home.jsx","serviceWorker.js","Pages/WaitingRoom/WaitingRoom.jsx","index.js","assets/images/avatar.png"],"names":["style","background","border","fontSize","fontWeight","cursor","outline","Square","onClick","value","borderRadius","width","height","margin","display","gridTemplateColumns","gridTemplateRows","Board","squares","map","square","i","key","socket","openSocket","baseUrl","Game","textInput","useRef","chat","useState","msgs","setMsgs","path","useLocation","pathname","split","playerId","pop","roomId","Array","fill","board","setBoard","isMyTurn","setIsMyTrun","pts","setPts","winner","lines","length","a","b","c","calculateWinner","myChar","setChar","btn","setBtn","handleClick","boardCopy","payload","axios","post","data","status","submitBid","bid","current","Number","toast","error","useEffect","addEventListener","e","keyCode","Msg","emit","sendChat","on","bidWinner","move","dark","isArray","system","prev","game","oppoChar","className","Row","minHeight","Col","InputGroup","Prepend","Text","id","FormControl","ref","placeholder","aria-label","aria-describedby","Button","disabled","GameRoom","autoClose","transition","Zoom","limit","newestOnTop","Home","room","console","log","window","location","href","Container","fluid","Navbar","expand","variant","Brand","md","span","offset","Card","Title","Body","createRoom","Boolean","hostname","match","WaitingRoom","players","setPlayers","joinbtn","setJoinbtn","startbtn","setStartbtn","joinRoom","username","getData","Avatar","Img","src","logo","player","xs","startGame","ReactDOM","render","StrictMode","exact","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.f457269e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst style = {\n  background: \"lightblue\",\n  border: \"2px solid darkblue\",\n  fontSize: \"30px\",\n  fontWeight: \"800\",\n  cursor: \"pointer\",\n  outline: \"none\",\n};\n\nconst Square = ({ onClick, value }) => {\n  return (\n    <button style={style} onClick={onClick}>\n      {value}\n    </button>\n  );\n};\n\nexport default Square;\n","import React from \"react\";\nimport Square from \"./Squares\";\n\nconst style = {\n  border: \"4px solid darkblue\",\n  borderRadius: \"10px\",\n  width: \"250px\",\n  height: \"250px\",\n  margin: \"0 auto\",\n  display: \"grid\",\n  gridTemplateColumns: \"repeat(3, 1fr)\",\n  gridTemplateRows: \"repeat(3, 1fr)\",\n};\n\nconst Board = ({ squares, onClick }) => {\n  return (\n    <div style={style}>\n      {squares.map((square, i) => (\n        <Square key={i} value={square} onClick={() => onClick(i)} />\n      ))}\n    </div>\n  );\n};\n\nexport default Board;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./Game.css\";\nimport Board from \"../components/Board\";\nimport { calculateWinner } from \"../helper\";\nimport { useLocation } from \"react-router-dom\";\nimport openSocket from \"socket.io-client\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { baseUrl } from \"../config.json\";\nimport { Col, Row, Button, InputGroup, FormControl } from \"react-bootstrap\";\n\nconst socket = openSocket(baseUrl);\n\nfunction Game() {\n  const textInput = useRef();\n  const chat = useRef();\n  const [msgs, setMsgs] = useState([]);\n  const [chatInput, setChatInput] = useState(\"\");\n  const { pathname } = useLocation();\n  const path = pathname.split(\"/\");\n  const playerId = path.pop();\n  const roomId = path.pop();\n\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [isMyTurn, setIsMyTrun] = useState(false);\n  const [bid, setBid] = useState();\n  const [pts, setPts] = useState(100);\n  const winner = calculateWinner(board);\n  const [myChar, setChar] = useState(\"\");\n  const [btn, setBtn] = useState(false);\n\n  const handleClick = async (i) => {\n    const boardCopy = [...board];\n    if (winner || boardCopy[i]) return;\n    if (isMyTurn) {\n      boardCopy[i] = myChar;\n      const payload = {\n        roomId: roomId,\n        playerId: playerId,\n        value: i,\n        board: boardCopy,\n      };\n      const { data } = await axios.post(`${baseUrl}/symbolPlaced`, payload);\n      if (data.status) {\n        setIsMyTrun(false);\n      }\n    }\n  };\n\n  const submitBid = async () => {\n    const bid = textInput.current.value;\n    const payload = {\n      roomId: roomId,\n      playerId: playerId,\n      value: Number(bid),\n      board: board,\n    };\n    if (pts >= Number(bid)) {\n      const { data } = await axios.post(`${baseUrl}/bid`, payload);\n      if (data.status) {\n        setBtn((current) => !current);\n      }\n    } else {\n      toast.error(\"You don't have enought Points\");\n    }\n  };\n\n  const sendChat = () => {\n    const Msg = `${playerId}: ${chat.current.value}`;\n    socket.emit(\"sendMsg\", { Msg, roomId });\n    chat.current.value = \"\";\n  };\n\n  useEffect(() => {\n    textInput.current.addEventListener(\"keydown\", (e) => {\n      if (e.keyCode === 13) {\n        submitBid();\n      }\n    });\n    chat.current.addEventListener(\"keydown\", (e) => {\n      if (e.keyCode === 13) {\n        sendChat();\n      }\n    });\n    socket.emit(\"joinRoom\", { roomId, playerId });\n    socket.on(\"gameState\", (data) => {\n      const { bid, bidWinner, move } = data;\n      if (bid.status === \"DRAW\") {\n        setBtn((current) => true);\n        toast.dark(\"It's a Draw\");\n      } else if (bid.status === \"DONE\" && bidWinner === null && move === null) {\n        toast.dark(\"Bids are equal\");\n      } else if (\n        bid.status === \"DONE\" &&\n        bidWinner === playerId &&\n        move === playerId\n      ) {\n        textInput.current.value = \"\";\n        setIsMyTrun(true);\n        toast.dark(\"Your Turn\");\n      } else if (\n        bid.status === \"DONE\" &&\n        bidWinner !== playerId &&\n        move !== playerId\n      ) {\n        textInput.current.value = \"\";\n        toast.dark(\"You Lost the Bid\");\n      }\n      if (bid[playerId] === 0 && bid.status === \"DONE\") {\n        setBtn((current) => !current);\n      }\n      setPts(data[playerId]);\n    });\n    socket.on(\"Char\", (data) => {\n      if (myChar === \"\") setChar(data);\n    });\n\n    socket.on(\"Reload\", (data) => {\n      const { bid, bidWinner, move } = data;\n      if (\n        bid.status === \"DONE\" &&\n        bidWinner === playerId &&\n        move === playerId\n      ) {\n        setIsMyTrun(true);\n        toast.dark(\"Your Turn\");\n      }\n      if (bid[playerId] !== 0) {\n        setBtn((current) => !current);\n        textInput.current.value = bid[playerId];\n      }\n      if (Array.isArray(data[\"board\"]) && data[\"board\"].length)\n        setBoard(data[\"board\"]);\n      setPts(data[playerId]);\n    });\n    socket.on(\"recieveMsg\", ({ system, Msg }) => {\n      setMsgs((prev) => {\n        return [...prev, { system, Msg }];\n      });\n    });\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"Move\", (data) => {\n      const boardCopy = [...board];\n      const { game, bidWinner } = data;\n      if (winner || boardCopy[game]) return;\n      const oppoChar = \"X\" === myChar ? \"O\" : \"X\";\n      boardCopy[game] = bidWinner === playerId ? myChar : oppoChar;\n      setBoard(boardCopy);\n    });\n  }, [myChar, board]);\n\n  return (\n    <>\n      <div className=\"root\">\n        <Row style={{ minHeight: \"100vh\" }} className=\"fill-width \">\n          <Col className=\"d-flex flex-column justify-content-center align-items-center \">\n            <Board squares={board} onClick={handleClick} />\n            <div className=\"font d-flex  justify-content-center p-4\">\n              {\"Points left: \" + pts}\n            </div>\n            <div className=\"d-flex  justify-content-center p-4\">\n              <InputGroup className=\"mb-3 input\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"basic-addon1\">$</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl\n                  ref={textInput}\n                  placeholder=\"Bid\"\n                  aria-label=\"Bid\"\n                  aria-describedby=\"basic-addon1\"\n                />\n              </InputGroup>\n            </div>\n            <div className=\"d-flex  justify-content-center p-4\">\n              <Button className=\"button \" onClick={submitBid} disabled={btn}>\n                Bid\n              </Button>\n            </div>\n\n            <div className=\"font\">\n              {btn && \"Waiting for Other Player to Bid\"}\n            </div>\n            <div className=\"font\">{winner && \"Winner: \" + winner}</div>\n          </Col>\n\n          <Col className=\"fill-width chat-room chat-visible \">\n            <ul className=\"pages\">\n              <li className=\"chat page\">\n                <div className=\"chatArea\">\n                  <ul className=\"messages\">\n                    {msgs.map(({ system, Msg }, i) =>\n                      system ? (\n                        <li className=\"system-msg\" key={i}>\n                          {Msg}\n                        </li>\n                      ) : (\n                        <li key={i}>{Msg}</li>\n                      )\n                    )}\n                  </ul>\n                </div>\n                <input\n                  ref={chat}\n                  className=\"inputMessage\"\n                  placeholder=\"Type here...\"\n                />\n              </li>\n            </ul>\n          </Col>\n        </Row>\n      </div>\n    </>\n  );\n}\n\nexport default Game;\n","export function calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./GameRoom.css\";\nimport Game from \"../../components/Game\";\nimport { ToastContainer, Zoom } from \"react-toastify\";\n\nfunction GameRoom() {\n  return (\n    <>\n      <ToastContainer\n        autoClose={5000}\n        transition={Zoom}\n        limit={3}\n        newestOnTop\n      />\n      <Game />\n    </>\n  );\n}\n\nexport default GameRoom;\n","import React from \"react\";\nimport \"./Home.css\";\nimport axios from \"axios\";\nimport { baseUrl } from \"../../config.json\";\nimport { Card, Navbar, Button, Container, Col } from \"react-bootstrap\";\n\nfunction Home() {\n  async function createRoom() {\n    const { data } = await axios.post(baseUrl);\n    const path = `/waitingroom/${data.room}`;\n    console.log(path);\n    window.location.href = path;\n  }\n  return (\n    <>\n      <div className=\"home-container\">\n        <Container fluid>\n          <Navbar className=\"nav-color\" expand=\"lg\" variant=\"dark\">\n            <Navbar.Brand>Tic-Tac-Toe</Navbar.Brand>\n          </Navbar>\n          <Col\n            md={{ span: 6, offset: 3 }}\n            className=\"d-flex flex-column justify-content-around fill \"\n          >\n            <div className=\"p-2\">\n              <Card className=\"card\">\n                <Card.Title className=\"card-title\">Rules</Card.Title>\n                <Card.Body className=\"text-justify\">\n                  <ul>\n                    <li>\n                      Unlike Regular Tic Tac Toe 'X' doesnt always start first.\n                    </li>\n                    <li>\n                      Each player begins with 100 points. Players can use these\n                      points to place bids\n                    </li>\n                    <li>\n                      Turns are decided by the bids placed by the players. The\n                      Player with bigger bid wins round and can freely place\n                      his/her move\n                    </li>\n                    <li>\n                      If both players reach 0 points before winning then the\n                      game is considered a draw\n                    </li>\n                    <li>\n                      If both players bid the same points then its considered\n                      draw and they have to bid again\n                    </li>\n                  </ul>\n                </Card.Body>\n              </Card>\n            </div>\n            <div className=\" d-flex  justify-content-center p-2 \">\n              <Button className=\"button\" onClick={() => createRoom()}>\n                {\"Start\"}\n              </Button>\n            </div>\n          </Col>\n        </Container>\n      </div>\n    </>\n  );\n}\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState, useRef, useEffect } from \"react\";\nimport \"./WaitingRoom.css\";\nimport axios from \"axios\";\nimport { useLocation } from \"react-router-dom\";\nimport { baseUrl } from \"../../config.json\";\nimport {\n  Card,\n  Button,\n  InputGroup,\n  FormControl,\n  Col,\n  Row,\n} from \"react-bootstrap\";\nimport logo from \"../../assets/images/avatar.png\";\nimport openSocket from \"socket.io-client\";\nconst socket = openSocket(baseUrl);\n\nfunction WaitingRoom() {\n  const textInput = useRef();\n  const [players, setPlayers] = useState([]);\n  const { pathname } = useLocation();\n  const roomId = pathname.split(\"/\").pop();\n  const [joinbtn, setJoinbtn] = useState(false);\n  const [startbtn, setStartbtn] = useState(true);\n\n  async function joinRoom() {\n    const username = textInput.current.value;\n    const payload = { roomId: roomId, playerId: username };\n    socket.emit(\"joinRoom\", payload);\n  }\n\n  async function startGame() {\n    const username = textInput.current.value;\n    const path = `/room/${roomId}/${username}`;\n    console.log(path);\n    window.location.href = path;\n  }\n\n  useEffect(() => {\n    textInput.current.addEventListener(\"keydown\", (e) => {\n      if (e.keyCode === 13) {\n        joinRoom();\n      }\n    });\n    async function getData() {\n      const payload = { roomId: roomId };\n      const { data } = await axios.post(`${baseUrl}/getPlayers`, payload);\n      setPlayers((prev) => data);\n      if (data.length === 2) {\n        setStartbtn((current) => !current);\n        setJoinbtn((current) => !current);\n      }\n    }\n    socket.on(\"joined\", (data) => {\n      setPlayers(data);\n      if (data.length === 2) {\n        setStartbtn((current) => !current);\n        setJoinbtn((current) => !current);\n      }\n    });\n    getData();\n  }, []);\n\n  const Avatar = ({ username }) => (\n    <Card className=\"player-card\">\n      <Card.Img variant=\"top\" src={logo} />\n      <Card.Body>\n        <Card.Title>{username}</Card.Title>\n      </Card.Body>\n    </Card>\n  );\n  return (\n    <>\n      <div className=\"root\">\n        <Row className=\"fill-width\">\n          <Col\n            md={6}\n            className=\"d-flex flex-column justify-content-between fill-height\"\n          >\n            {players.length === 0 && (\n              <div className=\"font text-center\">\n                Waiting for players to join:{\" \"}\n              </div>\n            )}\n            {players.length > 0 && (\n              <div className=\"font text-center\">Players in the Game : </div>\n            )}\n            <Row className=\" d-flex  justify-content-center p-4 \">\n              {players.map((player, i) => (\n                <Col md={5} xs={6} className=\"p-2\">\n                  <Avatar key={i} username={player.playerId} />\n                </Col>\n              ))}\n            </Row>\n          </Col>\n          <Col className=\"p-4 d-flex flex-column justify-content-center\" md={6}>\n            <div className=\"d-flex  justify-content-center p-4\">\n              <InputGroup className=\" input\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"basic-addon1\">@</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl\n                  ref={textInput}\n                  placeholder=\"Username\"\n                  aria-label=\"Username\"\n                  aria-describedby=\"basic-addon1\"\n                />\n              </InputGroup>\n            </div>\n            <Row>\n              {!joinbtn ? (\n                <Col className=\" d-flex  justify-content-center p-4 \">\n                  <Button\n                    className=\"button\"\n                    onClick={() => joinRoom()}\n                    disabled={joinbtn}\n                  >\n                    {\"Join\"}\n                  </Button>\n                </Col>\n              ) : (\n                <Col className=\" d-flex  justify-content-center p-4 \">\n                  <Button\n                    className=\"button\"\n                    onClick={() => startGame()}\n                    disabled={startbtn}\n                  >\n                    {\"Start\"}\n                  </Button>\n                </Col>\n              )}\n            </Row>\n          </Col>\n        </Row>\n      </div>\n    </>\n  );\n}\n\nexport default WaitingRoom;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport GameRoom from \"../src/Pages/GameRoom/GameRoom\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport Home from \"../src/Pages/Home/Home\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport WaitingRoom from \"../src/Pages/WaitingRoom/WaitingRoom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"/room\">\n          <GameRoom />\n        </Route>\n        <Route path=\"/waitingroom\">\n          <WaitingRoom />\n        </Route>\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/avatar.3f28b642.png\";"],"sourceRoot":""}